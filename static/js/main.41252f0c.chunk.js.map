{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","src","monster","id","alt","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","console","log","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAEaA,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACvB,uBACAC,UAAY,UACZC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KCHCI,G,MAAO,SAACC,GAAD,OAClB,sBAAKJ,UAAY,iBAAjB,UACE,qBAAKK,IAAG,+BAA2BD,EAAME,QAAQC,GAAzC,0BAAqEC,IAAI,KACjF,6BAAKJ,EAAME,QAAQG,OACnB,4BAAIL,EAAME,QAAQI,aCFTC,G,MAAW,SAAAP,GAAK,OAC3B,qBAAKJ,UAAU,YAAf,SACGI,EAAMQ,SAASC,KAAI,SAAAP,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WC+BVO,G,wDAnCb,aAAe,IAAD,8BACZ,gBAaJf,aAAa,SAACgB,GACZ,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbpC,EAAKC,MAAQ,CACXR,SAAU,GACVK,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEJ,SAAUa,S,oBAM/C,WACAC,QAAQC,IAAIC,KAAKR,OADR,MAG2BQ,KAAKR,MAA/BR,EAHD,EAGCA,SAAUK,EAHX,EAGWA,YACZY,EAAmBjB,EAASkB,QAAO,SAAAxB,GAAO,OAAIA,EAAQG,KAAKsB,cAAcC,SAASf,EAAYc,kBACpG,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACD,cAAC,EAAD,CACAF,YAAc,iBACdC,aAAgB6B,KAAK7B,eAEpB,cAAC,EAAD,CAAUa,SAAUiB,W,GA9BVI,IAAMC,YCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.41252f0c.chunk.js","sourcesContent":["import React from \"react\";\nimport './search-box.styles.css'\nexport const SearchBox = ({placeholder, handleChange  } )=>(\n  <input\n  className = \"search \"\n  type=\"search\"\n  placeholder={placeholder}\n  onChange={handleChange}\n/>\n)","import React from \"react\";\n\nimport './card.styles.css'\n\nexport const Card = (props)=>(\n  <div className = 'card-container'>\n    <img src= {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"\" />\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n)","import React from 'react'\n\nimport { Card } from '../card/card.component'\n\nimport './card-list.styles.css'\n\nexport const CardList = props  => (\n  <div className=\"card-list\">\n    {props.monsters.map(monster => (\n      <Card key={monster.id} monster={monster} />\n    ))}\n  </div>\n);\n","import React from 'react'\nimport { SearchBox } from './components/search-box/search-box.component' \nimport { CardList } from './components/card-list/card-list.component'\nimport './App.css'\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      monsters: [],\n      searchField: '',\n    }\n    \n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }))  \n  }\n  \nhandleChange=(e)=>{\n  this.setState({ searchField: e.target.value })\n}\n  render() {\n  console.log(this.state);\n\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>monsters rolodex</h1>\n       <SearchBox \n       placeholder = 'search monster'\n       handleChange = {this.handleChange}\n          />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}